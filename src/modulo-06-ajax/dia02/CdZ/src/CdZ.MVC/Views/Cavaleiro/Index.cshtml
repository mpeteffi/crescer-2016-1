@model CdZ.MVC.Models.Cavaleiro.CavaleiroViewModel

<marquee>Preencha os campos abaixo para cadastrar um novo cavaleiro de Atena!</marquee>
<div id="toastErro" class="feedback-toast span12" style="display: none;">
    <div class="alert alert-error">
        <a class="close">x</a>
        <strong class="title">Ops!</strong>
        <span class="msg"></span>
    </div>
</div>
<div id="toastSucesso" class="feedback-toast span12" style="display: none;">
    <div class="alert alert-success">
        <a class="close">x</a>
        <strong class="title">Shimbalaiê!</strong>
        <span class="msg"></span>
    </div>
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AlturaCm, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.AlturaCm, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AlturaCm, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PesoLb, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.PesoLb, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PesoLb, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataNascimento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataNascimentoObj, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.DataNascimentoObj, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DataNascimentoObj, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Signo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EnumDropDownListFor(model => model.Signo, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Signo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TipoSanguineo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EnumDropDownListFor(model => model.TipoSanguineo, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TipoSanguineo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-8">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<hr>
<button id="btnCriar">Criar fake!</button>
<div id="detalhes-cavaleiro"></div>
<ul id="cavaleiros"></ul>

<script>
    var urlCavaleiroPost = '@Url.Action("Post")';
</script>

@section scripts {
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/Models/Cavaleiros.js"></script>
    <script src="~/Scripts/Views/CavaleiroIndexView.js"></script>
    <script>
        new CavaleiroIndexView({
            errorToast: new FeedbackToast({
                element: $('#toastErro')
            }),
            successToast: new FeedbackToast({
                element: $('#toastSucesso')
            }),
            cavaleirosUi: $('#cavaleiros'),
            urlCavaleiroGet: '@Url.Action("Get")',
            urlCavaleiroGetById: '@Url.Action("GetById")',
            urlCavaleiroPost: '@Url.Action("Post")',
            urlCavaleiroDelete: '@Url.Action("Delete")',
            urlCavaleiroPut: '@Url.Action("Put")',
        }).render();
    </script>
}